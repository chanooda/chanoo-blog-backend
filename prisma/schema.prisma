generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Folder {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  parentId Int?
  parent   Folder?  @relation("ParentChildFolder", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child    Folder[] @relation("ParentChildFolder")
  folderImage FolderImage[] 

  @@index([parentId])
}

model Series {
  id     Int      @id @default(autoincrement())
  name   String
  writes Write[]
}

model Tag {
  id        Int          @id @default(autoincrement())
  name      String
  writeTags WritesTag[] 
}

model Write {
  id        Int          @id @default(autoincrement())
  title     String
  seriesId  Int?
  content   String       @db.LongText
  isPublish Boolean
  series    Series?      @relation(fields: [seriesId], references: [id], onDelete: SetNull)
  writeTags WritesTag[] 
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  @@index([seriesId])
}

model WritesTag {
  id      Int    @id @default(autoincrement())
  tagId   Int
  writeId Int
  tags    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  write   Write @relation(fields: [writeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  

  @@index([tagId])
  @@index([writeId])
}

model Image{
  id Int @id @default(autoincrement())
  fieldname String
  originalname String 
  mimetype String
  size Int
  url String
}

model FolderImage{
  id Int @id @default(autoincrement())
  fieldname String
  originalname String @unique
  mimetype String
  size Int
  url String
  folder  Folder @relation(fields: [folderId], references: [id] , onDelete: Cascade, onUpdate: Cascade)
  folderId Int
  
}